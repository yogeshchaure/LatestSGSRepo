package com.sgs.model.entity;

import com.sgs.model.service.SGSAppModuleImpl;

import java.sql.Date;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Jul 19 08:02:47 PDT 2022
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MarkUpRateMasterImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        RateId,
        Geography,
        ServiceCategory,
        MarkupRate,
        EffectiveRom,
        EffectiveTill,
        CreatedDate,
        CreatedBy,
        UpdatedDate,
        UpdatedBy,
        MARKUPRATEID;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    private static final ADFLogger LOG = ADFLogger.createADFLogger(SgsAccPayInvoicesImpl.class);

    public static final int RATEID = AttributesEnum.RateId.index();
    public static final int GEOGRAPHY = AttributesEnum.Geography.index();
    public static final int SERVICECATEGORY = AttributesEnum.ServiceCategory.index();
    public static final int MARKUPRATE = AttributesEnum.MarkupRate.index();
    public static final int EFFECTIVEROM = AttributesEnum.EffectiveRom.index();
    public static final int EFFECTIVETILL = AttributesEnum.EffectiveTill.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int UPDATEDDATE = AttributesEnum.UpdatedDate.index();
    public static final int UPDATEDBY = AttributesEnum.UpdatedBy.index();
    public static final int MARKUPRATEID = AttributesEnum.MARKUPRATEID.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MarkUpRateMasterImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("com.sgs.model.entity.MarkUpRateMaster");
    }

    /**
     * Gets the attribute value for RateId, using the alias name RateId.
     * @return the value of RateId
     */
    public Integer getRateId() {
        return (Integer) getAttributeInternal(RATEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for RateId.
     * @param value value to set the RateId
     */
    public void setRateId(Integer value) {
        setAttributeInternal(RATEID, value);
    }

    /**
     * Gets the attribute value for Geography, using the alias name Geography.
     * @return the value of Geography
     */
    public String getGeography() {
        return (String) getAttributeInternal(GEOGRAPHY);
    }

    /**
     * Sets <code>value</code> as the attribute value for Geography.
     * @param value value to set the Geography
     */
    public void setGeography(String value) {
        setAttributeInternal(GEOGRAPHY, value);
    }

    /**
     * Gets the attribute value for ServiceCategory, using the alias name ServiceCategory.
     * @return the value of ServiceCategory
     */
    public String getServiceCategory() {
        return (String) getAttributeInternal(SERVICECATEGORY);
    }

    /**
     * Sets <code>value</code> as the attribute value for ServiceCategory.
     * @param value value to set the ServiceCategory
     */
    public void setServiceCategory(String value) {
        setAttributeInternal(SERVICECATEGORY, value);
    }

    /**
     * Gets the attribute value for MarkupRate, using the alias name MarkupRate.
     * @return the value of MarkupRate
     */
    public String getMarkupRate() {
        return (String) getAttributeInternal(MARKUPRATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for MarkupRate.
     * @param value value to set the MarkupRate
     */
    public void setMarkupRate(String value) {
        setAttributeInternal(MARKUPRATE, value);
    }

    /**
     * Gets the attribute value for EffectiveRom, using the alias name EffectiveRom.
     * @return the value of EffectiveRom
     */
    public Date getEffectiveRom() {
        return (Date) getAttributeInternal(EFFECTIVEROM);
    }

    /**
     * Sets <code>value</code> as the attribute value for EffectiveRom.
     * @param value value to set the EffectiveRom
     */
    public void setEffectiveRom(Date value) {
        setAttributeInternal(EFFECTIVEROM, value);
    }

    /**
     * Gets the attribute value for EffectiveTill, using the alias name EffectiveTill.
     * @return the value of EffectiveTill
     */
    public Date getEffectiveTill() {
        return (Date) getAttributeInternal(EFFECTIVETILL);
    }

    /**
     * Sets <code>value</code> as the attribute value for EffectiveTill.
     * @param value value to set the EffectiveTill
     */
    public void setEffectiveTill(Date value) {
        setAttributeInternal(EFFECTIVETILL, value);
    }

    /**
     * Gets the attribute value for CreatedDate, using the alias name CreatedDate.
     * @return the value of CreatedDate
     */
    public Date getCreatedDate() {
        return (Date) getAttributeInternal(CREATEDDATE);
    }


    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the value of CreatedBy
     */
    public String getCreatedBy() {
        return (String) getAttributeInternal(CREATEDBY);
    }


    /**
     * Gets the attribute value for UpdatedDate, using the alias name UpdatedDate.
     * @return the value of UpdatedDate
     */
    public Date getUpdatedDate() {
        return (Date) getAttributeInternal(UPDATEDDATE);
    }


    /**
     * Gets the attribute value for UpdatedBy, using the alias name UpdatedBy.
     * @return the value of UpdatedBy
     */
    public String getUpdatedBy() {
        return (String) getAttributeInternal(UPDATEDBY);
    }


    /**
     * Gets the attribute value for MARKUPRATEID, using the alias name MARKUPRATEID.
     * @return the value of MARKUPRATEID
     */
    public String getMARKUPRATEID() {
        return (String) getAttributeInternal(MARKUPRATEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for MARKUPRATEID.
     * @param value value to set the MARKUPRATEID
     */
    public void setMARKUPRATEID(String value) {
        setAttributeInternal(MARKUPRATEID, value);
    }


    /**
     * @param rateId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Integer rateId) {
        return new Key(new Object[] { rateId });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        
        super.create(attributeList);
        try {
            SGSAppModuleImpl am = new SGSAppModuleImpl();
            setRateId(am.getDBSequence("SGS_MARKUP_RATE_MASTER_SEQ"));
        } catch (Exception e) {
            LOG.severe(e);
        }
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }
}

